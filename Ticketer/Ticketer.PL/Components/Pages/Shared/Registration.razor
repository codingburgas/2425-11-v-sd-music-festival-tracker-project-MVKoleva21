@page "/Account/Register"
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@inject Ticketer.DAL.AuthenticationService.AuthenticationService AuthenticationService

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <h3 class="text-center mb-4">Create Account</h3>

            <EditForm Model="registerModel" OnValidSubmit="HandleRegister" FormName="Registration">

                <DataAnnotationsValidator />

                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
                    <ValidationMessage For="@(() => registerModel.Email)" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
                    <ValidationMessage For="@(() => registerModel.Password)" />
                    <small class="text-muted">
                        Password must be at least 8 characters long and contain letters, numbers, and special characters.
                    </small>
                </div>

                <div class="mb-3">
                    <label for="confirmPassword" class="form-label">Confirm Password</label>
                    <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword" />
                    <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                </div>

                <button type="submit" class="btn btn-primary w-100" disabled="@isProcessing">
                    @if (isProcessing)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Creating Account...</span>
                    }
                    else
                    {
                        <span>Create Account</span>
                    }
                </button>
            </EditForm>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">@errorMessage</div>
            }
        </div>
    </div>
</div>

<style>
    .validation-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .btn-primary {
        padding: 0.75rem;
        font-weight: 500;
        transition: all 0.2s ease;
    }

        .btn-primary:disabled {
            opacity: 0.7;
        }

    .alert {
        padding: 0.75rem;
        border-radius: 4px;
    }
</style>

@code {
    private RegisterModel registerModel = new();
    private string errorMessage = string.Empty;
    private bool isProcessing;

    private async Task HandleRegister()
    {
        try
        {
            isProcessing = true;
            var result = await AuthenticationService.RegisterUser(
                registerModel.Email.Trim(),
                registerModel.Password
            );

            if (result)
            {
                NavigationManager.NavigateTo("/Account/Login");
            }
            else
            {
                errorMessage = "Registration failed. Please try again.";
            }
        }
        catch (Exception)
        {
            errorMessage = "An unexpected error occurred.";
        }
        finally
        {
            isProcessing = false;
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        [StringLength(100, ErrorMessage = "Email cannot exceed 100 characters")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 8, ErrorMessage = "Password must be at least 8 characters long")]
        [RegularExpression(@"^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$",
            ErrorMessage = "Password must include letters, numbers, and special characters")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please confirm your password")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
