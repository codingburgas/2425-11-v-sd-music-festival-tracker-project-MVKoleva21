using System.Security.Claims;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Http;
using Ticketer.DAL.Models;
using Ticketer.DAL.Data;
using BCrypt.Net;
using Microsoft.Data.SqlClient;

namespace Ticketer.DAL.AuthenticationService
{
    public class AuthenticationService
    {
        private readonly TicketManagementDatabaseContext _dbContext;
        private readonly IHttpContextAccessor _httpContextAccessor;

        public AuthenticationService(TicketManagementDatabaseContext dbContext, IHttpContextAccessor httpContextAccessor)
        {
            _dbContext = dbContext;
            _httpContextAccessor = httpContextAccessor;
        }

        public async Task<bool> RegisterUser(string email, string password, string role)
        {
            // Check if the user already exists
            var existingUser = _dbContext.Users.FirstOrDefault(u => u.Email == email);
            if (existingUser != null)
                return false;

            // Hash the password
            var passwordHash = BCrypt.Net.BCrypt.HashPassword(password);

            // Create new user
            var user = new User
            {
                Email = email,
                PasswordHash = passwordHash,
                Role = role,
                Deposit = 0  // Default deposit amount
            };

            // Insert the user into the database
            SqlCommand command = new SqlCommand("INSERT INTO dbo.Users (Email, PasswordHash, Role, Deposit) VALUES (@Email, @PasswordHash, @Role, @Deposit)", _dbContext.Connection);
            command.Parameters.AddWithValue("@Email", user.Email);
            command.Parameters.AddWithValue("@PasswordHash", user.PasswordHash);
            command.Parameters.AddWithValue("@Role", user.Role);
            command.Parameters.AddWithValue("@Deposit", user.Deposit);

            await command.ExecuteNonQueryAsync();
            return true;
        }

        public async Task<bool> LoginUser(string email, string password)
        {
            // Fetch user by email
            var user = _dbContext.Users.FirstOrDefault(u => u.Email == email);
            if (user == null || !BCrypt.Net.BCrypt.Verify(password, user.PasswordHash))
                return false;

            // Create the claims for the authenticated user
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, user.Email),
                new Claim(ClaimTypes.Role, user.Role)
            };

            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);

            // Sign the user in
            await _httpContextAccessor.HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);
            return true;
        }

        public async Task LogoutUser()
        {
            // Log the user out by clearing the authentication cookie
            await _httpContextAccessor.HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
        }

        public async Task UpdateUserDepositAsync(User user)
        {
            var command = new SqlCommand("UPDATE dbo.Users SET Deposit = @Deposit WHERE UserId = @UserId", _dbContext.Connection);
            command.Parameters.AddWithValue("@Deposit", user.Deposit);
            command.Parameters.AddWithValue("@UserId", user.UserId);

            await command.ExecuteNonQueryAsync();
        }

        public async Task<User> GetAuthenticatedUserAsync()
        {
            var userEmail = _httpContextAccessor.HttpContext?.User?.Identity?.Name;
            if (string.IsNullOrEmpty(userEmail)) return null;

            return await Task.Run(() =>
                _dbContext.Users.FirstOrDefault(u => u.Email == userEmail)
            );
        }


        public User CurrentUser
        {
            get
            {
                // Assuming the user is stored in the HttpContext
                var userEmail = _httpContextAccessor.HttpContext.User.Identity.Name;
                return _dbContext.Users.FirstOrDefault(u => u.Email == userEmail);
            }
        }


    }
}
