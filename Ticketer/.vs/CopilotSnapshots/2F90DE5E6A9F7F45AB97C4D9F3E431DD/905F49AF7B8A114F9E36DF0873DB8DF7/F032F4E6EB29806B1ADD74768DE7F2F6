@page "/BuyTicket"
@inject Ticketer.DAL.ConcertService.ConcertService ConcertService
@inject Ticketer.DAL.TicketService.TicketService TicketService
@inject Ticketer.DAL.AuthenticationService.AuthenticationService AuthenticationService
@inject NavigationManager NavigationManager

<h3>Buy Concert Ticket</h3>

@if (concerts != null && concerts.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>Date</th>
                <th>Price</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var concert in concerts)
            {
                <tr>
                    <td>@concert.Title</td>
                    <td>@concert.Description</td>
                    <td>@concert.Date.ToShortDateString()</td>
                    <td>@concert.Price.ToString("C")</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => BuyTicket(concert.ConcertId, concert.Price)" disabled="@isProcessing">Buy Ticket</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No concerts available.</p>
}

@if (isProcessing)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}

@if (showInsufficientFundsModal)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Insufficient Funds</h5>
                    <button type="button" class="btn-close" @onclick="() => showInsufficientFundsModal = false"></button>
                </div>
                <div class="modal-body">
                    <p>You do not have enough funds to purchase this ticket.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showInsufficientFundsModal = false">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Concert> concerts = new List<Concert>();
    private string errorMessage;
    private string successMessage;
    private bool isProcessing;
    private bool showInsufficientFundsModal;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            concerts = await ConcertService.GetAllConcertsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while fetching concerts: {ex.Message}";
        }
    }

    private async Task BuyTicket(int concertId, decimal price)
    {
        try
        {
            isProcessing = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            // Get the currently logged-in user
            var currentUser = AuthenticationService.CurrentUser;

            if (currentUser.Deposit < price)
            {
                // If user does not have enough deposit, display modal
                showInsufficientFundsModal = true;
                return;
            }

            // Create a new ticket and deduct the deposit
            var ticket = new Ticket
            {
                UserId = currentUser.UserId,
                ConcertId = concertId,
                PurchaseDate = DateTime.Now
            };

            // Call service to save ticket
            await TicketService.CreateTicketAsync(ticket);

            // Deduct the price from the user's deposit
            currentUser.Deposit -= price;

            // Update the deposit in the database
            await AuthenticationService.UpdateUserDepositAsync(currentUser);

            // Display success message
            successMessage = "Ticket purchased successfully!";

            // Redirect to the user's purchased tickets page after a short delay
            await Task.Delay(2000);
            NavigationManager.NavigateTo("/my-tickets");
        }
        catch (Exception ex)
        {
            // Handle any unexpected errors
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }
}
